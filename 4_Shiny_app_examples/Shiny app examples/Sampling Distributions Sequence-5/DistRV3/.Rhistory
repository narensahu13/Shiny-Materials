EOU <- c(0,0,0,0,1,0,0,0);EOU
PSP <- c(0,0,0,0,1,1,1,0);PSP
TEL <- c(0,0,0,0,1,1,1,0);TEL
PSPxTEL <- c(0,0,0,0,0,0,1,0);PSPxTEL
PUSE <- c(0,0,0,0,0,0,0,1);PUSE
TRST <- c(0,0,0,0,0,0,0,1);TRST
ENJ <- c(0,0,0,0,0,0,0,1);ENJ
ATT <- c(0,0,0,0,0,0,0,0);ATT
# Define inner model by just
# binding the columns into a matrix
SLINT237.inner <- cbind(EOU,PSP,TEL,
PSPxTEL,PUSE,
TRST,ENJ,ATT)
SLINT237.inner
# give it row names
rownames(SLINT237.inner) <- c("EOU","PSP","TEL",
"PSPXTEL","PUSE",
"TRST","ENJ","ATT")
SLINT237.inner
SLINT237.outer <- list(8:11,5:7,1:4,28:39,
12:15,20:23,16:19,24:26)
SLINT237.outer
SLINT237.mod <- rep("A",8)
SLINT237.mod
SLINT237.pls <- plspm(SLINT237,
inner=SLINT237.inner,
outer=SLINT237.outer,
modes=SLINT237.mod,
scheme="path", scaled=FALSE,
boot.val=TRUE, br=200)
summary(SLINT237.pls)
SLINT237.pls <- plspm(SLINT237,
inner=SLINT237.inner,
outer=SLINT237.outer,
modes=SLINT237.mod,
scheme="path", scaled=TRUE,
boot.val=TRUE, br=200)
summary(SLINT237.pls)
library(shiny)
runExample("01_hello")
?runExample
?getOption
?shinyServer
runExample("02_text")
runExample("02_text")
runExample("03_reactivity")
library(shiny)
runExample("01_hello")
runExample("02_text")
runExample("02_text")
?verbatimTextOutput
library(shiny)
runExample("01_hello")
runExample("02_text")
runExample("02_text")
runExample("03_reactivity")
library(shiny)
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
runExample("03_reactivity")
search() # displays packages and data frames
library("survey")
d1 <- read.table("http://www.bio.ic.ac.uk/research/mjcraw/therbook/data/worms.txt",header=T)
View(`d1`)
library("colorspace", lib.loc="C:/Users/jeff/Documents/R/win-library/3.0")
search() # displays packages and data frames
library()
install.packages("survey")
library("survey", lib.loc="C:/Users/jeff/Documents/R/win-library/3.0")
d1 <- read.table("http://www.bio.ic.ac.uk/research/mjcraw/therbook/data/worms.txt",header=T)
View(`d1`)
head(d1) # to display first six records
head(d1) # to display first six records
x <- scan()
x
ls()
runExample("01_hello")
runExample("01_hello")
?sliderInput
?runExample
runExample("02_text")
library(plspm)
data(college)
View(college)
head(college, n = 5)
str(college)
HighSchool = c(0, 0, 0, 0)
Intro =      c(1, 0, 0, 0)
Medium =     c(1, 1, 0, 0)
Graduation = c(1, 1, 1, 0)
Graduation
gpa_inner = rbind(HighSchool, Intro,
Medium, Graduation)
gpa_inner
View(college)
gpa_outer = list(1:3, 4:7, 8:11, 12)
gpa_outer
gpa_modes = rep("A", 4)
gpa_modes = rep("A", 4)
gpa_modes
gpa_pls = plspm(college, gpa_inner,
gpa_outer, gpa_modes,
boot.val = TRUE)
gpa_pls
plot(gpa_pls)
gpa_pls$boot$paths
gpa_pls$boot$paths
?plspm
female = college[college$Gender == "FEMALE", ]
female_gpa_pls = plspm(female,
gpa_inner,
gpa_outer,
gpa_modes)
female_gpa_pls
male = college[college$Gender == "MALE", ]
View(college)
male = college[college$Gender == "MALE", ]
# male students plspm
male_gpa_pls = plspm(male,
gpa_inner,
gpa_outer,
gpa_modes)
# Then we need to compare them by examining the
# corresponding path coefficients
# plot path coefficients
plot(female_gpa_pls, box.size = 0.14)
plot(male_gpa_pls, box.size = 0.14)
gpa_pls
View(college)
gpa_boot = plspm.groups(gpa_pls,
college$Gender,
method = "bootstrap")
gpa_boot
gpa_boot
gpa_boot = plspm.groups(gpa_pls,
college$Gender,
method = "bootstrap")
gpa_boot
gpa_boot
gpa_perm = plspm.groups(gpa_pls,
college$Gender,
method = "permutation")
gpa_perm
gpa_perm = plspm.groups(gpa_pls,
college$Gender,
method = "permutation")
gpa_perm
gpa_perm = plspm.groups(gpa_pls,
college$Gender,
method = "permutation")
gpa_perm
barplot(t(as.matrix(gpa_boot$test[, 2:3])), border = NA, beside = TRUE,
col = c("#FEB24C", "#74A9CF"),
las = 2, ylim = c(-0.1, 1),
cex.names = 0.8, col.axis = "gray30",
cex.axis = 0.8)
abline(h = 0, col = "gray50")
title("Path coefficients of Female and Male Students",
cex.main = 0.95,
col.main = "gray30")
legend("top", legend = c("female", "male"), pt.bg = c("#FEB24C", "#A6BDDB"),
ncol = 2, pch = 22, col = c("#FEB24C", "#74A9CF"), bty = "n",
text.col = "gray40")
SLEXP237 <- read.csv("c://temp/sl-exp-237.csv",header=T)
View(SLEXP237)
EOU <- c(0,0,1,0,0,0);EOU
TEL <- c(0,0,1,1,1,0);TEL
PUSE <- c(0,0,0,0,0,1);PUSE
TRST <- c(0,0,0,0,0,1);TRST
ENJ <- c(0,0,0,0,0,1);ENJ
ATT <- c(0,0,0,0,0,0);ATT
SLEXP237.inner <- cbind(EOU,TEL,PUSE,
TRST,ENJ,ATT)
SLEXP237.inner
c("EOU","TEL","PUSE",
"TRST","ENJ","ATT")
slexp.row.names <- c("EOU","TEL","PUSE",
"TRST","ENJ","ATT")
# take a look
slexp.row.names
SLEXP237.inner
rownames(SLEXP237.inner) <- slexp.row.names
# take another look; Note inner model paths
# go from 'column to row', not 'row to column'
SLEXP237.inner
SLEXP237.inner
SLEXP237.outer <- list(8:11,1:4,12:15,
20:23,16:19,24:26)
# Take a look, it is a list
SLEXP237.outer
SLEXP237.inner
SLEXP237.mod <- rep("A",6)
# Take a look
SLEXP237.mod
SLEXP237.pls <- plspm(SLEXP237,
inner=SLEXP237.inner,
outer=SLEXP237.outer,
modes=SLEXP237.mod,
# we use factor weighting
scheme="factor",
# we do scale it
scaled=TRUE,
# we bootstrap
boot.val=TRUE,
# 200 times
br=200)
summary(SLEXP237.pls)
summary(SLEXP237.pls)
## NOW RUN THE EXP-INEXP GROUP COMPARISONS USING PERMUTATION
res237p.group <- plspm.groups(SLEXP237.pls,
SLEXP237$EXP,
method="permutation",
reps=200)
res237p.group
res237b.group <- plspm.groups(SLEXP237.pls,
SLEXP237$EXP,
method="bootstrap",
reps=200)
res237b.group
res237b.group
##########################################
#####   GETTING STARTED with SHINY   #####
##########################################
## EXAMPLE #1
## Hello Shiny !
# The Hello Shiny example is a simple
# application that generates a random
# distribution with a configurable number
# of observations and then plots it.
# To run the example, type:
library(shiny)
runExample("01_hello")
runExample("02_text")
runExample("02_text")
runExample("03_reactivity")
runExample("03_reactivity")
library("shiny", lib.loc="C:/Users/jeff/Documents/R/win-library/3.0")
runExample("03_reactivity")
runApp("C:/shinyapps/001")
runApp("C:/shinyapps/001")
runApp("C:/shinyapps/002")
runApp("C:/shinyapps/003")
runApp("C:/shinyapps/003")
library(shiny)
runApp("C:/shinyapps/001")
runApp("C:/shinyapps/002")
runApp("C:/shinyapps/003")
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
runApp("C:/shinyapps/003")
runExample("05_sliders")
library(shiny)
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("09_upload")
runExample("10_download")
runApp("C:/shinyapps/004")
runApp("C:/shinyapps/007")
runApp("C:/shinyapps/005")
runApp("C:/shinyapps/006")
install.packages("maps")
library("maps", lib.loc="C:/Users/jeff/Documents/R/win-library/3.0")
runApp("C:/shinyapps/006")
install.packages("maptools")
library("maptools", lib.loc="C:/Users/jeff/Documents/R/win-library/3.0")
runApp("C:/shinyapps/006")
install.packages("UScensus2010")
runApp("C:/shinyapps/006")
install.packages("UScensus2010blkgrp")
runApp("C:/shinyapps/006")
runApp("C:/shinyapps/004")
runApp("C:/shinyapps/008")
expr <- get(paste("expr",dist,sep="."))
runApp("C:/shinyapps/007")
n.default <- 500
#discrete r* wrapper functions
n.default <- 500
#discrete r* wrapper functions
rbern <- function(n=n.default,bern.prob=0.5){ rbinom(n=n,size=1,prob=bern.prob) }
rbinom2 <- function(n=n.default,binom.size=10,binom.prob=0.5){ rbinom(n,size=binom.size,prob=binom.prob) }
drunif <- function(n=n.default,drunif.min=0,drunif.max=100,drunif.step=1){ sample(seq(drunif.min,drunif.max,by=drunif.step),size=n,rep=T) }
rgeom2 <- function(n=n.default,geom.prob=0.5){ rgeom(n,prob=geom.prob) }
rhyper2 <- function(n=n.default,hyper.M=10,hyper.N=20,hyper.K=10){ rhyper(nn=n,m=hyper.M,n=hyper.N-hyper.M,k=hyper.K) }
rnbinom2 <- function(n=n.default,nbin.size=10,nbin.prob=0.5){ rnbinom(n,size=nbin.size,prob=nbin.prob) }
rpois2 <- function(n=n.default,poi.lambda=10){ rpois(n,poi.lambda) }
# continuous r* wrapper functions
rbeta2 <- function(n=n.default,beta.shape1=2,beta.shape2=2){ rbeta(n,shape1=beta.shape1,shape2=beta.shape2) }
rcauchy2 <- function(n=n.default,cau.location=0,cau.scale=1){ rcauchy(n,location=cau.location,scale=cau.scale) }
rchisq2 <- function(n=n.default,chisq.df=1){ rchisq(n,df=chisq.df) }
rexp2 <- function(n=n.default,exp.rate=1){ rexp(n=n,rate=exp.rate) }
rf2 <- function(n=n.default,F.df1=1,F.df2=15){ rf(n,df1=F.df1,df2=F.df2) }
rgamma2 <- function(n=n.default,gam.shape=1,gam.rate=1){ rgamma(n,shape=gam.shape,rate=gam.rate) }
rlaplace2 <- function(n=n.default,lap.location=0,lap.scale=1){ rlaplace(n,location=lap.location,scale=lap.scale) }
rlogis2 <- function(n=n.default,logi.location=0,logi.scale=1){ rlogis(n,location=logi.location,scale=logi.scale) }
rpareto2 <- function(n=n.default,pareto.location=1,pareto.shape=3){ rpareto(n,location=pareto.location,shape=pareto.shape) }
rweibull2 <- function(n=n.default,weib.shape=1,weib.scale=1){ rweibull(n,shape=weib.shape,scale=weib.scale) }
rt2 <- function(n=n.default,t.df=15){ rt(n=n,df=t.df) }
# Continuous distribution plotmath expressions:
expr.beta <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma(alpha+beta),Gamma(alpha)*Gamma(beta))*x^{alpha-1}*(1-x)^{beta-1})
~~~~displaystyle(list(paste(0<=x) <=1, atop(paste(0<alpha) <infinity, paste(0<beta) <infinity)))
)))
expr.cauchy <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,pi*sigma)~frac(1,1+bgroup("(",frac(x-theta,sigma),")")^2))
~~~~displaystyle(list(paste(-infinity<x) <infinity, atop(paste(-infinity<theta) <infinity, sigma > 0)))
)))
expr.chisq <- expression(italic(paste(frac(1,2^{frac(nu,2)}*Gamma~bgroup("(",frac(nu,2),")"))*x^{frac(nu,2)-1}*e^{-frac(x,2)}
~~~~displaystyle(atop(paste(0<=x) <infinity, nu~"="~list(1,2,...)))
)))
expr.exp <- expression(italic(paste(displaystyle(f(x)~"="~lambda*e^{-lambda*x})
~~~~displaystyle(atop(paste(0<=x) <infinity,lambda>0))
)))
expr.F <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma~bgroup("(",frac(nu[1]+nu[2],2),")"),Gamma~bgroup("(",frac(nu[1],2),")")~Gamma~bgroup("(",frac(nu[2],2),")"))
~bgroup("(",frac(nu[1],nu[2]),")")^{frac(nu[1],2)}~frac(x^{frac(nu[1],2)-1},bgroup("(",1+frac(d[1],d[2])*x,")")^{frac(d[1]+d[2],2)}))
~~~~displaystyle(atop(paste(0<=x) <infinity,list(d[1],d[2])~"="~list(1,2,...)))
)))
expr.gam <- expression(italic(paste(displaystyle(f(x)~"="~frac(beta^alpha,Gamma(alpha))*x^{alpha-1}*e^{-beta*x})
~~~~displaystyle(list(paste(0<x) <infinity, atop(paste(0<alpha) <infinity, paste(0<beta) <infinity)))
)))
expr.lap <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,2*sigma)~e^{-frac(abs(x-mu),sigma)})
~~~~displaystyle(list(paste(-infinity<x) <infinity, atop(paste(-infinity<mu) <infinity, sigma > 0)))
)))
expr.logi <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,beta)~frac(e^{-frac(x-mu,beta)},bgroup("[",1+e^{-frac(x-mu,beta)},"]")^2))
~~~~displaystyle(list(paste(-infinity<x) <infinity, atop(paste(-infinity<mu) <infinity, beta > 0)))
)))
expr.lognorm <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,x*sigma*sqrt(2*pi))~e^{-frac((log(x)-mu)^2,2*sigma^2)})
~~~~displaystyle(list(paste(0<x) <infinity, atop(paste(-infinity<log(mu)) <infinity, paste(0<sigma^scriptscriptstyle("2")) <infinity)))
)))
expr.norm <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,sqrt(2*pi*sigma^scriptscriptstyle("2")))~e^{frac(-1,2*sigma^{scriptscriptstyle("2")})*(x-mu)^scriptscriptstyle("2")})
~~~~displaystyle(list(paste(-infinity<x) <infinity, atop(paste(-infinity<mu) <infinity, paste(0<sigma^scriptscriptstyle("2")) <infinity)))
)))
expr.pareto <- expression(italic(paste(displaystyle(f(x)~"="~frac(beta*alpha^beta,x^{beta+1}))
~~~~displaystyle(atop(paste(alpha<x) <infinity, list(alpha,beta) > 0))
)))
expr.t <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma~bgroup("(",frac(nu+1,2),")"),sqrt(nu*pi)~Gamma~bgroup("(",frac(nu,2),")"))~bgroup("(",1+frac(x^2,nu),")")^{-frac(nu+1,2)})
~~~~displaystyle(atop(paste(-infinity<x) <infinity, nu > 0))
)))
expr.unif <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,b-a)
~~~~displaystyle(paste(-infinity<paste(a<=paste(x<=b))) <infinity))
)))
expr.weib <- expression(italic(paste(displaystyle(f(x)~"="~frac(k,lambda)~bgroup("(",frac(x,lambda),")")^{k-1}*e^(-x/lambda)^k)
~~~~displaystyle(atop(paste(0<=x) <infinity, list(k,lambda) > 0))
)))
# Discrete distribution plotmath expressions:
expr.bern <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~p^x*(1-p)^{1-x})
~~~~displaystyle(atop(x~"="~list(0,1), paste(0<=p)<=1))
)))
expr.bin <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~bgroup("(",atop(n,x),")")~p^x*(1-p)^{n-x})
~~~~displaystyle(atop(x~"="~list(0,1,...,n), paste(0<=p)<=1))
)))
expr.dunif <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~frac(1,N))
~~~~displaystyle(x~"="~list(1,2,...,N))
)))
expr.geom <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~p*(1-p)^x)
~~~~displaystyle(atop(x~"="~list(1,2,...), paste(0<=p)<=1))
)))
expr.hgeom <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~frac(bgroup("(",atop(M,x),")")~bgroup("(",atop(N-M,K-x),")"),bgroup("(",atop(N,K),")")))
~~~~displaystyle(list(x~"="~list(0,1,...,K), atop(paste(M-(N-K)<=x)<=M, list(N,M,K)>=0)))
)))
expr.nbin <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~frac(Gamma(x+n),Gamma(n)*x*"!")~p^r*(1-p)^x)
~~~~displaystyle(atop(x~"="~list(0,1,...), paste(0<=p)<=1))
)))
expr.poi <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~frac(e^{-lambda}*lambda^x,x*"!"))
~~~~displaystyle(atop(x~"="~list(0,1,...), paste(0<=lambda)<infinity))
)))
save.image("C:/shinyapps/008/samplingApp.RData")
runApp("C:/shinyapps/008")
runApp("C:/shinyapps/007")
runApp("C:/shinyapps/008")
runApp("C:/shinyapps/008")
expr.norm <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,sqrt(2*pi*sigma^scriptscriptstyle("2")))~e^{frac(-1,2*sigma^{scriptscriptstyle("2")})*(x-mu)^scriptscriptstyle("2")})
~~~~displaystyle(list(paste(-infinity<x) <infinity, paste(-infinity<mu) <infinity, paste(0<sigma^scriptscriptstyle("2")) <infinity))
)))
expr.unif <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,b-a)
~~~~displaystyle(paste(-infinity<paste(a<=paste(x<=b))) <infinity))
)))
expr.t <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma~bgroup("(",frac(nu+1,2),")"),sqrt(nu*pi)~Gamma~bgroup("(",frac(nu,2),")"))~bgroup("(",1+frac(x^2,nu),")")^{-frac(nu+1,2)})
~~~~displaystyle(list(paste(-infinity<x) <infinity, nu > 0))
)))
expr.F <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma~bgroup("(",frac(nu[1]+nu[2],2),")"),Gamma~bgroup("(",frac(nu[1],2),")")~Gamma~bgroup("(",frac(nu[2],2),")"))
~bgroup("(",frac(nu[1],nu[2]),")")^{frac(nu[1],2)}~frac(x^{frac(nu[1],2)-1},bgroup("(",1+frac(d[1],d[2])*x,")")^{frac(d[1]+d[2],2)}))
~~~~displaystyle(paste(0<=x) <infinity~and~list(d[1],d[2]) > 0)
)))
expr.gam <- expression(italic(paste(displaystyle(f(x)~"="~frac(beta^alpha,Gamma(alpha))*x^{alpha-1}*e^{-beta*x})
~~~~displaystyle(list(paste(0<x) <infinity, paste(0<alpha) <infinity, paste(0<beta) <infinity))
)))
expr.exp <- expression(italic(paste(displaystyle(f(x)~"="~lambda*e^{-lambda*x})
~~~~displaystyle(list(paste(0<=x) <infinity,lambda>0))
)))
expr.chisq <- expression(italic(paste(frac(1,2^{frac(nu,2)}*Gamma~bgroup("(",frac(nu,2),")"))*x^{frac(nu,2)-1}*e^{-frac(x,2)}
~~~~displaystyle(list(paste(0<=x) <infinity, nu %in% bold(N)))
)))
expr.lnorm <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,x*sigma*sqrt(2*pi))~e^{-frac((log(x)-mu)^2,2*sigma^2)})
~~~~displaystyle(list(paste(0<x) <infinity, paste(-infinity<log(mu)) <infinity, paste(0<sigma^scriptscriptstyle("2")) <infinity))
)))
expr.beta <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma(alpha+beta),Gamma(alpha)*Gamma(beta))*x^{alpha-1}*(1-x)^{beta-1})
~~~~displaystyle(list(paste(0<=x) <=1, paste(0<alpha) <infinity, paste(0<beta) <infinity))
)))
save.image("C:/shinyapps/008/plotmathExpressions.RData")
runApp("C:/shinyapps/008")
runApp("C:/shinyapps/009")
n.default <- 500
#discrete r* wrapper functions
rbern <- function(n=n.default,bern.prob=0.5){ rbinom(n=n,size=1,prob=bern.prob) }
rbinom2 <- function(n=n.default,binom.size=10,binom.prob=0.5){ rbinom(n,size=binom.size,prob=binom.prob) }
drunif <- function(n=n.default,drunif.min=0,drunif.max=100,drunif.step=1){ sample(seq(drunif.min,drunif.max,by=drunif.step),size=n,rep=T) }
rgeom2 <- function(n=n.default,geom.prob=0.5){ rgeom(n,prob=geom.prob) }
rhyper2 <- function(n=n.default,hyper.M=10,hyper.N=20,hyper.K=10){ rhyper(nn=n,m=hyper.M,n=hyper.N-hyper.M,k=hyper.K) }
rnbinom2 <- function(n=n.default,nbin.size=10,nbin.prob=0.5){ rnbinom(n,size=nbin.size,prob=nbin.prob) }
rpois2 <- function(n=n.default,poi.lambda=10){ rpois(n,poi.lambda) }
# continuous r* wrapper functions
rbeta2 <- function(n=n.default,beta.shape1=2,beta.shape2=2){ rbeta(n,shape1=beta.shape1,shape2=beta.shape2) }
rcauchy2 <- function(n=n.default,cau.location=0,cau.scale=1){ rcauchy(n,location=cau.location,scale=cau.scale) }
rchisq2 <- function(n=n.default,chisq.df=1){ rchisq(n,df=chisq.df) }
rexp2 <- function(n=n.default,exp.rate=1){ rexp(n=n,rate=exp.rate) }
rf2 <- function(n=n.default,F.df1=1,F.df2=15){ rf(n,df1=F.df1,df2=F.df2) }
rgamma2 <- function(n=n.default,gam.shape=1,gam.rate=1){ rgamma(n,shape=gam.shape,rate=gam.rate) }
rlaplace2 <- function(n=n.default,lap.location=0,lap.scale=1){ rlaplace(n,location=lap.location,scale=lap.scale) }
rlogis2 <- function(n=n.default,logi.location=0,logi.scale=1){ rlogis(n,location=logi.location,scale=logi.scale) }
rpareto2 <- function(n=n.default,pareto.location=1,pareto.shape=3){ rpareto(n,location=pareto.location,shape=pareto.shape) }
rweibull2 <- function(n=n.default,weib.shape=1,weib.scale=1){ rweibull(n,shape=weib.shape,scale=weib.scale) }
rt2 <- function(n=n.default,t.df=15){ rt(n=n,df=t.df) }
# Continuous distribution plotmath expressions:
expr.beta <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma(alpha+beta),Gamma(alpha)*Gamma(beta))*x^{alpha-1}*(1-x)^{beta-1})
~~~~displaystyle(list(paste(0<=x) <=1, atop(paste(0<alpha) <infinity, paste(0<beta) <infinity)))
)))
expr.cauchy <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,pi*sigma)~frac(1,1+bgroup("(",frac(x-theta,sigma),")")^2))
~~~~displaystyle(list(paste(-infinity<x) <infinity, atop(paste(-infinity<theta) <infinity, sigma > 0)))
)))
expr.chisq <- expression(italic(paste(frac(1,2^{frac(nu,2)}*Gamma~bgroup("(",frac(nu,2),")"))*x^{frac(nu,2)-1}*e^{-frac(x,2)}
~~~~displaystyle(atop(paste(0<=x) <infinity, nu~"="~list(1,2,...)))
)))
expr.exp <- expression(italic(paste(displaystyle(f(x)~"="~lambda*e^{-lambda*x})
~~~~displaystyle(atop(paste(0<=x) <infinity,lambda>0))
)))
expr.F <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma~bgroup("(",frac(nu[1]+nu[2],2),")"),Gamma~bgroup("(",frac(nu[1],2),")")~Gamma~bgroup("(",frac(nu[2],2),")"))
~bgroup("(",frac(nu[1],nu[2]),")")^{frac(nu[1],2)}~frac(x^{frac(nu[1],2)-1},bgroup("(",1+frac(d[1],d[2])*x,")")^{frac(d[1]+d[2],2)}))
~~~~displaystyle(atop(paste(0<=x) <infinity,list(d[1],d[2])~"="~list(1,2,...)))
)))
expr.gam <- expression(italic(paste(displaystyle(f(x)~"="~frac(beta^alpha,Gamma(alpha))*x^{alpha-1}*e^{-beta*x})
~~~~displaystyle(list(paste(0<x) <infinity, atop(paste(0<alpha) <infinity, paste(0<beta) <infinity)))
)))
expr.lap <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,2*sigma)~e^{-frac(abs(x-mu),sigma)})
~~~~displaystyle(list(paste(-infinity<x) <infinity, atop(paste(-infinity<mu) <infinity, sigma > 0)))
)))
expr.logi <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,beta)~frac(e^{-frac(x-mu,beta)},bgroup("[",1+e^{-frac(x-mu,beta)},"]")^2))
~~~~displaystyle(list(paste(-infinity<x) <infinity, atop(paste(-infinity<mu) <infinity, beta > 0)))
)))
expr.lognorm <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,x*sigma*sqrt(2*pi))~e^{-frac((log(x)-mu)^2,2*sigma^2)})
~~~~displaystyle(list(paste(0<x) <infinity, atop(paste(-infinity<log(mu)) <infinity, paste(0<sigma^scriptscriptstyle("2")) <infinity)))
)))
expr.norm <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,sqrt(2*pi*sigma^scriptscriptstyle("2")))~e^{frac(-1,2*sigma^{scriptscriptstyle("2")})*(x-mu)^scriptscriptstyle("2")})
~~~~displaystyle(list(paste(-infinity<x) <infinity, atop(paste(-infinity<mu) <infinity, paste(0<sigma^scriptscriptstyle("2")) <infinity)))
)))
expr.pareto <- expression(italic(paste(displaystyle(f(x)~"="~frac(beta*alpha^beta,x^{beta+1}))
~~~~displaystyle(atop(paste(alpha<x) <infinity, list(alpha,beta) > 0))
)))
expr.t <- expression(italic(paste(displaystyle(f(x)~"="~frac(Gamma~bgroup("(",frac(nu+1,2),")"),sqrt(nu*pi)~Gamma~bgroup("(",frac(nu,2),")"))~bgroup("(",1+frac(x^2,nu),")")^{-frac(nu+1,2)})
~~~~displaystyle(atop(paste(-infinity<x) <infinity, nu > 0))
)))
expr.unif <- expression(italic(paste(displaystyle(f(x)~"="~frac(1,b-a)
~~~~displaystyle(paste(-infinity<paste(a<=paste(x<=b))) <infinity))
)))
expr.weib <- expression(italic(paste(displaystyle(f(x)~"="~frac(k,lambda)~bgroup("(",frac(x,lambda),")")^{k-1}*e^(-x/lambda)^k)
~~~~displaystyle(atop(paste(0<=x) <infinity, list(k,lambda) > 0))
)))
# Discrete distribution plotmath expressions:
expr.bern <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~p^x*(1-p)^{1-x})
~~~~displaystyle(atop(x~"="~list(0,1), paste(0<=p)<=1))
)))
expr.bin <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~bgroup("(",atop(n,x),")")~p^x*(1-p)^{n-x})
~~~~displaystyle(atop(x~"="~list(0,1,...,n), paste(0<=p)<=1))
)))
expr.dunif <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~frac(1,N))
~~~~displaystyle(x~"="~list(1,2,...,N))
)))
expr.geom <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~p*(1-p)^x)
~~~~displaystyle(atop(x~"="~list(1,2,...), paste(0<=p)<=1))
)))
expr.hgeom <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~frac(bgroup("(",atop(M,x),")")~bgroup("(",atop(N-M,K-x),")"),bgroup("(",atop(N,K),")")))
~~~~displaystyle(list(x~"="~list(0,1,...,K), atop(paste(M-(N-K)<=x)<=M, list(N,M,K)>=0)))
)))
expr.nbin <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~frac(Gamma(x+n),Gamma(n)*x*"!")~p^r*(1-p)^x)
~~~~displaystyle(atop(x~"="~list(0,1,...), paste(0<=p)<=1))
)))
expr.poi <- expression(italic(paste(displaystyle(P(X~"="~x)~"="~frac(e^{-lambda}*lambda^x,x*"!"))
~~~~displaystyle(atop(x~"="~list(0,1,...), paste(0<=lambda)<infinity))
)))
save.image("C:/shinyapps/010/samplingApp.RData")
runApp("C:/shinyapps/010")
runApp("C:/shinyapps/011")
install.packages("rgl")
runApp("C:/shinyapps/011")
runApp("C:/shinyapps/011")
runApp("C:/shinyapps/012")
runApp("C:/shinyapps/013")
install.packages("ENA")
runApp("C:/shinyapps/014")
install.packages("impute")
runApp("C:/shinyapps/014")
shiny::runApp("lectureapps/violin")
runApp("C:/shinyapps/004")
runApp("C:/shinyapps/014")
runApp("C:/shinyapps/003")
library(shiny)
runApp("C:/shinyapps/003")
runApp("C:/shinyapps/004")
runApp("C:/shinyapps/005")
runApp("C:/shinyapps/006")
runApp("C:/shinyapps/007")
runApp("C:/shinyapps/008")
